// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using YegnaGebiyaSystem.Models;

namespace YegnaGebiyaSystem.Migrations
{
    [DbContext(typeof(GebiyaContext))]
    [Migration("20200128052311_Initail")]
    partial class Initail
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("U_ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("YegnaGebiyaSystem.Models.Book", b =>
                {
                    b.Property<int>("B_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Author")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ISBN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("No_page")
                        .HasColumnType("int");

                    b.Property<int>("P_ID")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("B_ID");

                    b.HasIndex("P_ID");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            B_ID = 1,
                            Author = "mayet",
                            ISBN = "101",
                            No_page = 222,
                            P_ID = 1
                        },
                        new
                        {
                            B_ID = 2,
                            Author = "misganew",
                            ISBN = "103",
                            No_page = 345,
                            P_ID = 2
                        });
                });

            modelBuilder.Entity("YegnaGebiyaSystem.Models.Buyer", b =>
                {
                    b.Property<int>("B_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("U_ID")
                        .HasColumnType("int");

                    b.HasKey("B_ID");

                    b.HasIndex("U_ID");

                    b.ToTable("Buyers");

                    b.HasData(
                        new
                        {
                            B_ID = 1,
                            U_ID = 5
                        },
                        new
                        {
                            B_ID = 2,
                            U_ID = 6
                        });
                });

            modelBuilder.Entity("YegnaGebiyaSystem.Models.Car", b =>
                {
                    b.Property<int>("C_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Airbag")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("P_ID")
                        .HasColumnType("int");

                    b.Property<string>("Transmission")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("fueltype")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("C_ID");

                    b.HasIndex("P_ID");

                    b.ToTable("Cars");

                    b.HasData(
                        new
                        {
                            C_ID = 1,
                            Airbag = "good",
                            Capacity = 50,
                            Model = "toyota",
                            P_ID = 3,
                            Transmission = "noideia",
                            fueltype = "oil"
                        },
                        new
                        {
                            C_ID = 2,
                            Airbag = "good",
                            Capacity = 100,
                            Model = "rava4",
                            P_ID = 4,
                            Transmission = "noideia",
                            fueltype = "oil"
                        });
                });

            modelBuilder.Entity("YegnaGebiyaSystem.Models.Category", b =>
                {
                    b.Property<int>("Category_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Category_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Desceiption")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Category_ID");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Category_ID = 1,
                            Category_Name = "Electronics",
                            Desceiption = "work with electric status"
                        },
                        new
                        {
                            Category_ID = 2,
                            Category_Name = "Fasion",
                            Desceiption = "Fasion for cloth and shoes"
                        },
                        new
                        {
                            Category_ID = 3,
                            Category_Name = "Book",
                            Desceiption = "Book for student and learners"
                        },
                        new
                        {
                            Category_ID = 4,
                            Category_Name = "House",
                            Desceiption = "house for any purpose"
                        },
                        new
                        {
                            Category_ID = 5,
                            Category_Name = "Car",
                            Desceiption = "care for transport"
                        });
                });

            modelBuilder.Entity("YegnaGebiyaSystem.Models.Cloth", b =>
                {
                    b.Property<int>("C_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Brand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("P_ID")
                        .HasColumnType("int");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("C_ID");

                    b.HasIndex("P_ID");

                    b.ToTable("Cloths");

                    b.HasData(
                        new
                        {
                            C_ID = 1,
                            Brand = "nike",
                            Color = "white",
                            P_ID = 5,
                            Size = 33,
                            Type = "jeans"
                        },
                        new
                        {
                            C_ID = 2,
                            Brand = "puma",
                            Color = "blue",
                            P_ID = 6,
                            Size = 25,
                            Type = "tishert"
                        });
                });

            modelBuilder.Entity("YegnaGebiyaSystem.Models.Comment", b =>
                {
                    b.Property<int>("Com_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Buyer_ID")
                        .HasColumnType("int");

                    b.Property<string>("CommentBody")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Item_ID")
                        .HasColumnType("int");

                    b.Property<string>("Replay")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Seller_ID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Sent_Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Com_ID");

                    b.HasIndex("Buyer_ID");

                    b.HasIndex("Item_ID");

                    b.HasIndex("Seller_ID");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            Com_ID = 1,
                            Buyer_ID = 1,
                            CommentBody = "the product is nice",
                            Item_ID = 1,
                            Replay = "thank you for your support",
                            Seller_ID = 1,
                            Sent_Date = new DateTime(2019, 12, 3, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Com_ID = 2,
                            Buyer_ID = 2,
                            CommentBody = "the product has a problem",
                            Item_ID = 2,
                            Replay = "what is the problem",
                            Seller_ID = 2,
                            Sent_Date = new DateTime(2019, 12, 3, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("YegnaGebiyaSystem.Models.Computer", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<float>("CPU")
                        .HasColumnType("real");

                    b.Property<string>("Core")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Hard_Disk")
                        .HasColumnType("bigint");

                    b.Property<string>("Model")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OS")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("P_ID")
                        .HasColumnType("int");

                    b.Property<float>("Procesor_Speed")
                        .HasColumnType("real");

                    b.Property<string>("Processor_Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RAM")
                        .HasColumnType("int");

                    b.Property<string>("Resolution")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Size")
                        .HasColumnType("real");

                    b.HasKey("ID");

                    b.HasIndex("P_ID");

                    b.ToTable("Computers");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CPU = 2.5f,
                            Core = "i3",
                            Hard_Disk = 500L,
                            Model = "toshiba",
                            OS = "window",
                            P_ID = 7,
                            Procesor_Speed = 2.3f,
                            Processor_Type = "intel",
                            RAM = 4,
                            Resolution = "1080x900",
                            Size = 16f
                        });
                });

            modelBuilder.Entity("YegnaGebiyaSystem.Models.Feedback", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FeedbackBody")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Replay")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Replayer_Id")
                        .HasColumnType("int");

                    b.Property<int>("Sender_ID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Sent_Date")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("Sender_ID");

                    b.ToTable("Feedbacks");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            FeedbackBody = "low speed to process",
                            Replay = "ok",
                            Replayer_Id = 0,
                            Sender_ID = 2,
                            Sent_Date = new DateTime(2019, 12, 3, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("YegnaGebiyaSystem.Models.House", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Num_Bathroom")
                        .HasColumnType("int");

                    b.Property<int>("Num_bedroom")
                        .HasColumnType("int");

                    b.Property<int>("P_ID")
                        .HasColumnType("int");

                    b.Property<int>("Total_room")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("P_ID");

                    b.ToTable("Houses");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Location = "gonder",
                            Num_Bathroom = 3,
                            Num_bedroom = 2,
                            P_ID = 8,
                            Total_room = 6,
                            Type = "appartama"
                        },
                        new
                        {
                            ID = 2,
                            Location = "Addis ababa",
                            Num_Bathroom = 4,
                            Num_bedroom = 4,
                            P_ID = 9,
                            Total_room = 8,
                            Type = "appartama"
                        });
                });

            modelBuilder.Entity("YegnaGebiyaSystem.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasBeenShipped")
                        .HasColumnType("bit");

                    b.Property<double>("OrderTotal")
                        .HasColumnType("float");

                    b.Property<DateTime>("Orderplaced")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentTransactionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProductsID")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrderId");

                    b.HasIndex("ProductsID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("YegnaGebiyaSystem.Models.OrderDetails", b =>
                {
                    b.Property<int>("OrderDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int?>("B_ID")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int?>("P_ID")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int?>("S_ID")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("OrderDetailId");

                    b.HasIndex("B_ID");

                    b.HasIndex("OrderId");

                    b.HasIndex("P_ID");

                    b.HasIndex("S_ID");

                    b.HasIndex("UserId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("YegnaGebiyaSystem.Models.Phone", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Card_Slot")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Display")
                        .HasColumnType("real");

                    b.Property<string>("Finger_Print")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Front_Camera")
                        .HasColumnType("int");

                    b.Property<int>("Main_Camera")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OS")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("P_ID")
                        .HasColumnType("int");

                    b.Property<string>("Resolution")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SIM_NO")
                        .HasColumnType("int");

                    b.Property<int>("Storage")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("P_ID");

                    b.ToTable("Phones");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Card_Slot = "accept",
                            Display = 24f,
                            Finger_Print = "yes",
                            Front_Camera = 8,
                            Main_Camera = 16,
                            Model = "samsung",
                            OS = "Android",
                            P_ID = 10,
                            Resolution = "1080x700",
                            SIM_NO = 2,
                            Storage = 32
                        });
                });

            modelBuilder.Entity("YegnaGebiyaSystem.Models.Product", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddtDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Cat_ID")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<long>("Quantity")
                        .HasColumnType("bigint");

                    b.Property<int>("S_ID")
                        .HasColumnType("int");

                    b.Property<string>("Services")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("Cat_ID");

                    b.HasIndex("S_ID");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            AddtDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Cat_ID = 3,
                            Name = "java tutorial",
                            Price = 120.0,
                            Quantity = 3L,
                            S_ID = 1,
                            Services = "used",
                            Status = "avaliable"
                        },
                        new
                        {
                            ID = 2,
                            AddtDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Cat_ID = 3,
                            Name = "DB tutorial",
                            Price = 100.0,
                            Quantity = 3L,
                            S_ID = 2,
                            Services = "used",
                            Status = "avaliable"
                        },
                        new
                        {
                            ID = 3,
                            AddtDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Cat_ID = 5,
                            Name = "vitz",
                            Price = 800000.0,
                            Quantity = 3L,
                            S_ID = 3,
                            Services = "used",
                            Status = "avaliable"
                        },
                        new
                        {
                            ID = 4,
                            AddtDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Cat_ID = 5,
                            Name = "rava4",
                            Price = 600000.0,
                            Quantity = 1L,
                            S_ID = 4,
                            Services = "new",
                            Status = "avaliable"
                        },
                        new
                        {
                            ID = 5,
                            AddtDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Cat_ID = 2,
                            Name = "cloth",
                            Price = 700.0,
                            Quantity = 3L,
                            S_ID = 5,
                            Services = "new",
                            Status = "avaliable"
                        },
                        new
                        {
                            ID = 6,
                            AddtDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Cat_ID = 2,
                            Name = "cloth",
                            Price = 700.0,
                            Quantity = 3L,
                            S_ID = 6,
                            Services = "new",
                            Status = "avaliable"
                        },
                        new
                        {
                            ID = 7,
                            AddtDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Cat_ID = 1,
                            Name = "dell",
                            Price = 1120.0,
                            Quantity = 3L,
                            S_ID = 7,
                            Services = "used",
                            Status = "avaliable"
                        },
                        new
                        {
                            ID = 8,
                            AddtDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Cat_ID = 4,
                            Name = "appa1",
                            Price = 1234500.0,
                            Quantity = 3L,
                            S_ID = 8,
                            Services = "used",
                            Status = "avaliable"
                        },
                        new
                        {
                            ID = 9,
                            AddtDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Cat_ID = 4,
                            Name = "appa2",
                            Price = 1234500.0,
                            Quantity = 3L,
                            S_ID = 9,
                            Services = "new",
                            Status = "avaliable"
                        },
                        new
                        {
                            ID = 10,
                            AddtDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Cat_ID = 1,
                            Name = "Galaxy",
                            Price = 8000.0,
                            Quantity = 2L,
                            S_ID = 10,
                            Services = "new",
                            Status = "avaliable"
                        },
                        new
                        {
                            ID = 11,
                            AddtDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Cat_ID = 2,
                            Name = "torshin",
                            Price = 5000.0,
                            Quantity = 3L,
                            S_ID = 11,
                            Services = "used",
                            Status = "avaliable"
                        });
                });

            modelBuilder.Entity("YegnaGebiyaSystem.Models.Seller", b =>
                {
                    b.Property<int>("Seller_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Balance")
                        .HasColumnType("real");

                    b.Property<float>("Ratting")
                        .HasColumnType("real");

                    b.Property<int>("U_ID")
                        .HasColumnType("int");

                    b.HasKey("Seller_ID");

                    b.HasIndex("U_ID");

                    b.ToTable("Sellers");

                    b.HasData(
                        new
                        {
                            Seller_ID = 1,
                            Address = "Addis Ababa",
                            Balance = 0f,
                            Ratting = 45f,
                            U_ID = 2
                        },
                        new
                        {
                            Seller_ID = 2,
                            Address = "Addis Ababa",
                            Balance = 0f,
                            Ratting = 45f,
                            U_ID = 3
                        },
                        new
                        {
                            Seller_ID = 3,
                            Address = "Addis Ababa",
                            Balance = 0f,
                            Ratting = 45f,
                            U_ID = 4
                        },
                        new
                        {
                            Seller_ID = 4,
                            Address = "Addis Ababa",
                            Balance = 0f,
                            Ratting = 45f,
                            U_ID = 5
                        },
                        new
                        {
                            Seller_ID = 5,
                            Address = "Addis Ababa",
                            Balance = 0f,
                            Ratting = 45f,
                            U_ID = 6
                        },
                        new
                        {
                            Seller_ID = 6,
                            Address = "Addis Ababa",
                            Balance = 0f,
                            Ratting = 45f,
                            U_ID = 7
                        },
                        new
                        {
                            Seller_ID = 7,
                            Address = "Addis Ababa",
                            Balance = 0f,
                            Ratting = 45f,
                            U_ID = 8
                        },
                        new
                        {
                            Seller_ID = 8,
                            Address = "Addis Ababa",
                            Balance = 0f,
                            Ratting = 45f,
                            U_ID = 9
                        },
                        new
                        {
                            Seller_ID = 9,
                            Address = "Addis Ababa",
                            Balance = 0f,
                            Ratting = 45f,
                            U_ID = 10
                        },
                        new
                        {
                            Seller_ID = 10,
                            Address = "Addis Ababa",
                            Balance = 0f,
                            Ratting = 45f,
                            U_ID = 11
                        },
                        new
                        {
                            Seller_ID = 11,
                            Address = "Addis Ababa",
                            Balance = 0f,
                            Ratting = 45f,
                            U_ID = 12
                        });
                });

            modelBuilder.Entity("YegnaGebiyaSystem.Models.Shoes", b =>
                {
                    b.Property<int>("S_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Brand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("P_ID")
                        .HasColumnType("int");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.HasKey("S_ID");

                    b.HasIndex("P_ID");

                    b.ToTable("Shoes");

                    b.HasData(
                        new
                        {
                            S_ID = 1,
                            Brand = "nike",
                            Color = "Black",
                            P_ID = 11,
                            Size = 41
                        });
                });

            modelBuilder.Entity("YegnaGebiyaSystem.Models.ShoppingCartItem", b =>
                {
                    b.Property<int>("ShoppingCartItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<string>("ShoppingCartId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("productId")
                        .HasColumnType("int");

                    b.HasKey("ShoppingCartItemId");

                    b.HasIndex("productId");

                    b.ToTable("ShoppingCartItems");
                });

            modelBuilder.Entity("YegnaGebiyaSystem.Models.Sold_Items", b =>
                {
                    b.Property<int>("S_i_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("B_ID")
                        .HasColumnType("int");

                    b.Property<int?>("P_ID")
                        .HasColumnType("int");

                    b.Property<DateTime>("S_Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("S_ID")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("S_i_ID");

                    b.HasIndex("B_ID");

                    b.HasIndex("P_ID");

                    b.HasIndex("S_ID");

                    b.HasIndex("UserId");

                    b.ToTable("Sold_Items");

                    b.HasData(
                        new
                        {
                            S_i_ID = 1,
                            B_ID = 2,
                            P_ID = 1,
                            S_Date = new DateTime(2020, 1, 27, 21, 23, 9, 494, DateTimeKind.Local).AddTicks(6126),
                            S_ID = 1
                        },
                        new
                        {
                            S_i_ID = 2,
                            B_ID = 2,
                            P_ID = 5,
                            S_Date = new DateTime(2020, 1, 27, 21, 23, 9, 515, DateTimeKind.Local).AddTicks(9716),
                            S_ID = 5
                        });
                });

            modelBuilder.Entity("YegnaGebiyaSystem.Models.SubCatagory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("C_ID")
                        .HasColumnType("int");

                    b.Property<string>("SubcatagoryName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("C_ID");

                    b.ToTable("SubCatagories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            C_ID = 1,
                            SubcatagoryName = "Phone"
                        },
                        new
                        {
                            Id = 2,
                            C_ID = 1,
                            SubcatagoryName = "Computer"
                        },
                        new
                        {
                            Id = 3,
                            C_ID = 2,
                            SubcatagoryName = "Shoes"
                        },
                        new
                        {
                            Id = 4,
                            C_ID = 2,
                            SubcatagoryName = "Cloth"
                        },
                        new
                        {
                            Id = 5,
                            C_ID = 4,
                            SubcatagoryName = "House"
                        },
                        new
                        {
                            Id = 6,
                            C_ID = 5,
                            SubcatagoryName = "Car"
                        },
                        new
                        {
                            Id = 7,
                            C_ID = 3,
                            SubcatagoryName = "Book"
                        });
                });

            modelBuilder.Entity("YegnaGebiyaSystem.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Nationality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sex")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "552908c4-46c7-45f7-a3cd-73cf1e7a64e2",
                            Email = "naty@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "naty getnet",
                            PasswordHash = "natyman",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "natyman"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8f8d803f-34cd-42ba-b088-68df8672c67e",
                            Email = "misg@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "misganew yazie",
                            PasswordHash = "achexs",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "misganew"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cfd94a6a-fae7-4e6f-9e0b-765e5e1be575",
                            Email = "demie@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "demeke",
                            PasswordHash = "demeke",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "demeke"
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1d62c19e-1736-4089-87d7-9671ea84d265",
                            Email = "bela@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "belaynesh",
                            PasswordHash = "bela",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Belaynesh"
                        },
                        new
                        {
                            Id = 6,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "46c357b0-5a7b-4c0e-93eb-c6c0ea325f9b",
                            Email = "jhon@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "yohanees",
                            PasswordHash = "jhonman",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "jhon"
                        },
                        new
                        {
                            Id = 7,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f6baf203-af44-4007-af3a-03454e5afadb",
                            Email = "sent@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "sintayehu",
                            PasswordHash = "sent1234",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "sent"
                        },
                        new
                        {
                            Id = 8,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5e6ac72a-08da-4a9b-a9b1-a10bd44c4d4a",
                            Email = "sent@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "sintayehu",
                            PasswordHash = "sent1234",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "sent"
                        },
                        new
                        {
                            Id = 9,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0773c686-8e58-42c5-bc6c-8fa0f8b62802",
                            Email = "sent@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "sintayehu",
                            PasswordHash = "sent1234",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "sent"
                        },
                        new
                        {
                            Id = 10,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "483d3877-83c0-49f7-89fa-79f9bc88448e",
                            Email = "sent@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "sintayehu",
                            PasswordHash = "sent1234",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "sent"
                        },
                        new
                        {
                            Id = 11,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d2a0cc5d-6260-419b-8b80-8e0663f1da43",
                            Email = "sent@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "sintayehu",
                            PasswordHash = "sent1234",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "sent"
                        },
                        new
                        {
                            Id = 12,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5f30e3b7-9d9f-48b4-9d0d-f196c568b417",
                            Email = "sent@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "sintayehu",
                            PasswordHash = "sent1234",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "sent"
                        });
                });

            modelBuilder.Entity("YegnaGebiyaSystem.Models.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("YegnaGebiyaSystem.Models.UserRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("YegnaGebiyaSystem.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("YegnaGebiyaSystem.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("YegnaGebiyaSystem.Models.UserRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YegnaGebiyaSystem.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("YegnaGebiyaSystem.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("YegnaGebiyaSystem.Models.Book", b =>
                {
                    b.HasOne("YegnaGebiyaSystem.Models.Product", "Products")
                        .WithMany("Books")
                        .HasForeignKey("P_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("YegnaGebiyaSystem.Models.Buyer", b =>
                {
                    b.HasOne("YegnaGebiyaSystem.Models.User", "Users")
                        .WithMany("Buyers")
                        .HasForeignKey("U_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("YegnaGebiyaSystem.Models.Car", b =>
                {
                    b.HasOne("YegnaGebiyaSystem.Models.Product", "Products")
                        .WithMany("Cars")
                        .HasForeignKey("P_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("YegnaGebiyaSystem.Models.Cloth", b =>
                {
                    b.HasOne("YegnaGebiyaSystem.Models.Product", "Products")
                        .WithMany("Cloths")
                        .HasForeignKey("P_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("YegnaGebiyaSystem.Models.Comment", b =>
                {
                    b.HasOne("YegnaGebiyaSystem.Models.Buyer", "Buyers")
                        .WithMany("Comments")
                        .HasForeignKey("Buyer_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YegnaGebiyaSystem.Models.Product", "Products")
                        .WithMany("Comments")
                        .HasForeignKey("Item_ID");

                    b.HasOne("YegnaGebiyaSystem.Models.Seller", "Sellers")
                        .WithMany("Comments")
                        .HasForeignKey("Seller_ID");

                    b.HasOne("YegnaGebiyaSystem.Models.User", null)
                        .WithMany("Comments")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("YegnaGebiyaSystem.Models.Computer", b =>
                {
                    b.HasOne("YegnaGebiyaSystem.Models.Product", "Products")
                        .WithMany("Computers")
                        .HasForeignKey("P_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("YegnaGebiyaSystem.Models.Feedback", b =>
                {
                    b.HasOne("YegnaGebiyaSystem.Models.User", "Users")
                        .WithMany("Feedbacks")
                        .HasForeignKey("Sender_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("YegnaGebiyaSystem.Models.House", b =>
                {
                    b.HasOne("YegnaGebiyaSystem.Models.Product", "Products")
                        .WithMany("Houses")
                        .HasForeignKey("P_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("YegnaGebiyaSystem.Models.Order", b =>
                {
                    b.HasOne("YegnaGebiyaSystem.Models.Product", "Products")
                        .WithMany()
                        .HasForeignKey("ProductsID");
                });

            modelBuilder.Entity("YegnaGebiyaSystem.Models.OrderDetails", b =>
                {
                    b.HasOne("YegnaGebiyaSystem.Models.Buyer", "Buyers")
                        .WithMany("Order_Lists")
                        .HasForeignKey("B_ID");

                    b.HasOne("YegnaGebiyaSystem.Models.Order", "Order")
                        .WithMany("OrderLines")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YegnaGebiyaSystem.Models.Product", "Products")
                        .WithMany("Order_Lists")
                        .HasForeignKey("P_ID");

                    b.HasOne("YegnaGebiyaSystem.Models.Seller", "Sellers")
                        .WithMany("Order_Lists")
                        .HasForeignKey("S_ID");

                    b.HasOne("YegnaGebiyaSystem.Models.User", null)
                        .WithMany("Order_Lists")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("YegnaGebiyaSystem.Models.Phone", b =>
                {
                    b.HasOne("YegnaGebiyaSystem.Models.Product", "Products")
                        .WithMany("Phones")
                        .HasForeignKey("P_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("YegnaGebiyaSystem.Models.Product", b =>
                {
                    b.HasOne("YegnaGebiyaSystem.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("Cat_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YegnaGebiyaSystem.Models.Seller", "Sellers")
                        .WithMany()
                        .HasForeignKey("S_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("YegnaGebiyaSystem.Models.Seller", b =>
                {
                    b.HasOne("YegnaGebiyaSystem.Models.User", "Users")
                        .WithMany("Sellers")
                        .HasForeignKey("U_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("YegnaGebiyaSystem.Models.Shoes", b =>
                {
                    b.HasOne("YegnaGebiyaSystem.Models.Product", "Products")
                        .WithMany("Shoes")
                        .HasForeignKey("P_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("YegnaGebiyaSystem.Models.ShoppingCartItem", b =>
                {
                    b.HasOne("YegnaGebiyaSystem.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("productId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("YegnaGebiyaSystem.Models.Sold_Items", b =>
                {
                    b.HasOne("YegnaGebiyaSystem.Models.Buyer", "Buyers")
                        .WithMany("Sold_Items")
                        .HasForeignKey("B_ID");

                    b.HasOne("YegnaGebiyaSystem.Models.Product", "Products")
                        .WithMany("Sold_Items")
                        .HasForeignKey("P_ID");

                    b.HasOne("YegnaGebiyaSystem.Models.Seller", "Sellers")
                        .WithMany("Sold_Items")
                        .HasForeignKey("S_ID");

                    b.HasOne("YegnaGebiyaSystem.Models.User", null)
                        .WithMany("Sold_Items")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("YegnaGebiyaSystem.Models.SubCatagory", b =>
                {
                    b.HasOne("YegnaGebiyaSystem.Models.Category", "Category")
                        .WithMany("subCatagories")
                        .HasForeignKey("C_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
